I"'<p><code class="highlighter-rouge">Map</code> applies a given function to a list. The same effect can be achieved with a list comprehensions.</p>

<p>NB: it returns a map object that can be converted back to a list, or used as a generator.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>

<span class="n">mapped_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="n">my_list</span><span class="p">))</span>

<span class="c1"># or with a lambda function:
</span><span class="n">mapped_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">my_list</span><span class="p">))</span>

<span class="c1"># or with a list comprehensions:
</span><span class="n">mapped_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">foo</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">]</span>

<span class="k">print</span><span class="p">(</span><span class="n">mapped_list</span><span class="p">)</span></code></pre></figure>

<p>Output:
<em>[1, 1, 64]</em></p>

<hr />

<p><code class="highlighter-rouge">Filter</code> takes a function and a list as parameters, and returns a filter object (that can be converted into a list or used as a generator) that contains the values of the input list for which the input function returns <code class="highlighter-rouge">True</code>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">90890</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">234253</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="n">filtered_list</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">,</span> <span class="n">my_list</span><span class="p">)</span>

<span class="c1"># or with a list comprehensions:
</span><span class="n">filtered_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">my_list</span> <span class="k">if</span> <span class="n">x</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">]</span>


<span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">filtered_list</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">' - '</span><span class="p">)</span></code></pre></figure>

<p>Output:
<em>1 - 2 - 5 - 8 - 9</em></p>
:ET